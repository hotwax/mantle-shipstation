<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <!--TODO
        Time conversion for default time zone.
    -->

    <!--Service for getting XML data from screen-->
    <service verb="get" noun="OrderData">
        <in-parameters>
            <parameter name="start_date" type="Timestamp" format="MM/dd/yyyy HH:mm">
                <description>Find orders placed at or after this date.</description>
            </parameter>
            <parameter name="end_date" type="Timestamp" format="MM/dd/yyyy HH:mm">
                <description>Find orders placed at or before this date.</description>
            </parameter>
        </in-parameters>
        <actions>

                <set field="orderParts" from="[]"/>
                <script>

                    def response = ec.web.getResponse();
                    def context = ec.service.sync().name("co.hotwax.oms.OrderServices.find#Orders").parameters([statusId:'OrderApproved',placedDateStart:ec.l10n.format(start_date,'yyyy-MM-dd HH:mm'),placedDateEnd:ec.l10n.format(end_date,'yyyy-MM-dd HH:mm')]).call()
                    orderParts = context.orders
                    response.setContentType("application/xml")
                    Writer w = response.getWriter()
                    ec.resource.template("component://mantle-shipstation/screen/OrderData.xml.ftl",w)
                    w.flush()
                    w.close()
                </script>

        </actions>
    </service>

    <!-- service for POST call, when ShipStation wants to POST Shipment Notification-->
    <service verb="post" noun="ShipNotification">
        <in-parameters>
            <parameter name="orderId"/>
            <parameter name="tracking_number"/>
        </in-parameters>
        <actions>
            <set field="xmlData" from="ec.web.getRequestBodyText()"/>
            <set field="itemList" from="[]"/>
            <script>

                def rootNode = new XmlParser().parseText(xmlData)
                def orderId = rootNode.'OrderID'.text()
                def shipDate = rootNode.'ShipDate'.text()
                def Shipping_date = Date.parse("MM/dd/yyyy", shipDate).format("yyyy-MM-dd")
                def ShippingCost = rootNode.'ShippingCost'.text()
                def Carrier = rootNode.'Carrier'.text()
                def trackingNo = rootNode.'TrackingNumber'.text()
                def labelDate = rootNode.'LabelCreateDate'.text()
                def labelCreateDate = Date.parse('MM/dd/yyyy HH:mm', labelDate).format("yyyy-MM-dd HH:mm")

                for (Node item in rootNode.'Items'.'Item') {
                    String sku = item.'SKU'.text()
                    String name = item.'Name'.text()
                    String quantity = item.'Quantity'.text()
                    String lineItemId = item.'LineItemID'.text()
                    itemList.add([SKU:sku,Name:name,quantity:quantity,LineItemId:lineItemId])
                }
            </script>

            <entity-find-one entity-name="mantle.order.OrderHeaderAndPart" value-field="orderInfo">
                <field-map field-name="orderId" from="orderId"/>
            </entity-find-one>

            <service-call name="mantle.shipment.ShipmentServices.create#Shipment" in-map="[shipmentTypeEnumId:'ShpTpSales',statusId:'ShipInput',fromPartyId:orderInfo.vendorPartyId,
            toPartyId:orderInfo.customerPartyId, estimatedShipDate:Shipping_date, costUomId:orderInfo.currencyUomId, originFacilityId:orderInfo.facilityId
            , carrierPartyId:Carrier, shipmentMethodEnumId:orderInfo.shipmentMethodEnumId]" out-map="shipmentInfo"/>

            <service-call name="mantle.shipment.ShipmentServices.create#ShipmentPackage" in-map="[shipmentId:shipmentInfo.shipmentId]" out-map="shipmentPackageInfo"/>

            <iterate list="itemList" entry="item">
                <entity-find-one entity-name="mantle.product.Product" value-field="productInfo">
                    <field-map field-name="pseudoId" from="item.SKU"/>
                </entity-find-one>
                <entity-find-one entity-name="mantle.order.OrderItem" value-field="orderItemInfo">
                    <field-map field-name="orderId" from="orderId"/>
                    <field-map field-name="itemTypeEnumId" value="ItemProduct"/>
                    <field-map field-name="productId" from="productInfo.productId"/>
                </entity-find-one>
                <service-call name="mantle.shipment.ShipmentServices.create#ShipmentItem" in-map="[shipmentId:shipmentInfo.shipmentId,productId:productInfo.productId,quantity:item.quantity,orderId:orderId,orderItemSeqId:orderItemInfo.orderItemSeqId]" out-map="shipmentItemSourceInfo"/>

                <service-call name="mantle.shipment.ShipmentServices.pack#ShipmentItemSource" in-map="[shipmentItemSourceId:shipmentItemSourceInfo.shipmentItemSourceId,shipmentPackageSeqId:shipmentPackageInfo.shipmentPackageSeqId,quantity:item.quantity]"/>
            </iterate>

            <service-call name="mantle.shipment.ShipmentServices.update#ShipmentPackageAndRouteSeg" in-map="[shipmentId:shipmentInfo.shipmentId,shipmentPackageSeqId:shipmentPackageInfo.shipmentPackageSeqId,shipmentRouteSegmentSeqId:shipmentInfo.shipmentRouteSegmentSeqId,trackingCode:trackingNo,labelDate:labelCreateDate]"/>
            <service-call name="mantle.shipment.ShipmentServices.pack#Shipment" in-map="[shipmentId:shipmentInfo.shipmentId]"/>
            <service-call name="mantle.shipment.ShipmentServices.ship#Shipment" in-map="[shipmentId:shipmentInfo.shipmentId]"/>

            <!--
            TODO:
            Shipping rate is also returned by ShipStation but no action on it
            -->
        </actions>
    </service>
</services>