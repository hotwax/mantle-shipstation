<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

<!--     Shipping OrderItems -->
    <service verb="ship" noun="OrderItems">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
            <parameter name="tryAutoPackage" type="Boolean" default="true"/>
            <parameter name="shipDate" type="Timestamp" default="ec.user.nowTimestamp"/>
            <parameter name="itemList" type="List" required="true">
                <parameter name="itemMap" type="Map">
                    <parameter name="sku"/>
                    <parameter name="quantity"/>
                    <parameter name="lineItemId"/>
                    <parameter name="orderItemSeqId"/>
                </parameter>
            </parameter>
            <parameter name="trackingNumber" required="true"/>
            <parameter name="carrier" required="true"/>
            <parameter name="labelDate"/>
        </in-parameters>
        <out-parameters>
            <parameter name="shipmentId"/>
        </out-parameters>
        <actions>
            <!-- create#OrderItemsShipment has transaction=cache so make it not init the tx cache with transaction=use-or-begin -->
            <service-call name="mantle.ShipStation.OmsShipmentServices.create#OrderItemsShipment" out-map="context"
                          in-map="[orderId:orderId, orderPartSeqId:orderPartSeqId, createPackage:true, entryDate:shipDate,
                                   itemsList:itemList,tryAutoPackage:tryAutoPackage, trackingNumber:trackingNumber, carrier:carrier, labelDate:labelDate]"/>
            <entity-find entity-name="moqui.basic.EnumGroupMember" list="productItemTypeEgms" cache="true">
                <econdition field-name="enumGroupEnumId" value="EngItemsProduct"/>
            </entity-find>
            <set field="productItemTypes" from="productItemTypeEgms*.enumId"/>
            <!-- pack all items (Creating ShipmentPackageContent and AssetIssuance records) -->
            <iterate list="itemList" entry="item">
                <entity-find-one entity-name="mantle.order.OrderItem" value-field="orderItem">
                    <field-map field-name="orderId" from="orderId"/>
                    <field-map field-name="orderItemSeqId" from="item.orderItemSeqId"/>
                </entity-find-one>
                <if condition="orderItem.productId &amp;&amp; productItemTypes.contains(orderItem.itemTypeEnumId)">
                    <service-call name="mantle.shipment.ShipmentServices.pack#ShipmentProduct" in-map="[productId:orderItem.productId,
                                        quantity:item.quantity, shipmentId:shipmentId, shipmentPackageSeqId:shipmentPackageSeqId]"/>
                </if>
            </iterate>
            <service-call name="mantle.shipment.ShipmentServices.pack#Shipment"
                          in-map="[shipmentId:shipmentId, packedDate:shipDate]"/>

            <!-- set shipment Shipped -->
            <service-call name="mantle.shipment.ShipmentServices.ship#Shipment" in-map="[shipmentId:shipmentId]"/>
        </actions>
    </service>

    <service verb="create" noun="OrderItemsShipment" transaction="cache">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
            <parameter name="createPackage" type="Boolean" default="false"/>
            <parameter name="createRouteSegment" type="Boolean" default="true"/>
            <parameter name="originFacilityId"/>
            <parameter name="destinationFacilityId"/>
            <parameter name="tryAutoPackage" type="Boolean" default="true"/>
            <parameter name="shippingGatewayConfigId"/>
            <parameter name="entryDate" type="Timestamp" default="ec.user.nowTimestamp"/>
            <parameter name="itemsList" type="List" required="true">
                <parameter name="itemMap" type="Map">
                    <parameter name="sku"/>
                    <parameter name="quantity"/>
                    <parameter name="lineItemId"/>
                    <parameter name="orderItemSeqId"/>
                </parameter>
            </parameter>
            <parameter name="trackingNumber"/>
            <parameter name="carrier"/>
            <parameter name="labelDate"/>
        </in-parameters>
        <out-parameters>
            <parameter name="shipmentId"/>
            <parameter name="shipmentPackageSeqId"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/>
            <entity-find-one entity-name="mantle.order.OrderPart" value-field="orderPart"/>
            <if condition="!(orderPart.statusId in ['OrderApproved','OrderSent'] || orderHeader.statusId in ['OrderApproved', 'OrderSent'])">
                <return type="danger" message="Cannot create Shipment for Order Part in status ${orderPart.statusId}"/>
            </if>
            <!-- and not already on a Shipment? -->
            <set field="totalQtyToShip" from="0.0"/>
            <set field="activeShipmentIds" from="new TreeSet()"/>
            <entity-find entity-name="moqui.basic.EnumGroupMember" list="productItemTypeEgms" cache="true">
                <econdition field-name="enumGroupEnumId" value="EngItemsProduct"/>
            </entity-find>
            <set field="productItemTypes" from="productItemTypeEgms*.enumId"/>

            <iterate list="itemList" entry="item">
                <entity-find-one entity-name="mantle.order.OrderItem" value-field="Item">
                    <field-map field-name="orderId" from="orderId"/>
                    <field-map field-name="orderItemSeqId" from="item.orderItemSeqId"/>
                </entity-find-one>

                <!-- if no productId or not a product item type skip it -->
                <if condition="!orderItem.productId || !productItemTypes.contains(orderItem.itemTypeEnumId)">
                    <continue/>
                </if>

                <!-- see if Product is a physical item -->
                <entity-find-one entity-name="mantle.product.Product" value-field="product" cache="true">
                    <field-map field-name="productId" from="orderItem.productId"/>
                </entity-find-one>
                <if condition="!(product.productTypeEnumId in ['PtAsset', 'PtDigitalAsset', 'PtPickAssembly'])">
                    <continue/>
                </if>
                <!-- determine quantityNotShipped -->
                <set field="quantityNotShipped"
                     from="(orderItem.quantity != null ? orderItem.quantity : 1.0) * (orderItem.selectedAmount ?: 1.0)"/>
                <entity-find entity-name="mantle.shipment.ShipmentAndItemSource" list="existingSisList">
                    <econdition field-name="orderId"/>
                    <econdition field-name="orderItemSeqId" from="item.orderItemSeqId"/>
                    <econdition field-name="shipmentStatusId" operator="not-in" value="ShipRejected,ShipCancelled"/>
                    <econdition field-name="statusId" operator="not-equals" value="SisCancelled"/>
                </entity-find>
                <iterate list="existingSisList" entry="existingSis">
                    <set field="quantityNotShipped" from="quantityNotShipped - existingSis.quantity"/>
                    <if condition="existingSis.quantity">
                        <script>activeShipmentIds.add(existingSis.shipmentId)</script>
                    </if>
                </iterate>
                <!-- if no quantity not shipped skip the item and print warning -->
                <if condition="quantityNotShipped &lt;= 0">
                    <log message="orderId:${orderId}, id:${item.orderItemSeqId} is already shipped." level="warn"/>
                    <continue/>
                </if>
            </iterate>

            <!-- is this an ongoing shipment (use ShipTpSales) or incoming (use ShpTpPurchase) order based on internal org? -->
            <!-- TODO: what to do if both are internal orgs? need a flag or something for which side we're dealing with... -->
            <entity-find-one entity-name="mantle.party.PartyRole" value-field="customerOrgInternal">
                <field-map field-name="partyId" from="orderPart.customerPartyId"/>
                <field-map field-name="roleTypeId" value="OrgInternal"/>
            </entity-find-one>
            <set field="shipmentTypeEnumId" from="customerOrgInternal ? 'ShpTpPurchase' : 'ShpTpSales'"/>
            <if condition="orderPart.facilityId">
                <if condition="customerOrgInternal">
                    <then>
                        <set field="destinationFacilityId" from="destinationFacilityId ?: orderPart.facilityId"/>
                    </then>
                    <else>
                        <set field="originFacilityId" from="originFacilityId ?: orderPart.facilityId"/>
                    </else>
                </if>
            </if>
            <!-- get shippingGatewayConfigId from store, then vendor setting, then global -->
            <if condition="!shippingGatewayConfigId &amp;&amp; orderHeader.productStoreId &amp;&amp; orderPart.carrierPartyId">
                <entity-find-one entity-name="mantle.product.store.ProductStoreShippingGateway"
                                 value-field="psShipGateway">
                    <field-map field-name="productStoreId" from="orderHeader.productStoreId"/>
                    <field-map field-name="carrierPartyId" from="orderPart.carrierPartyId"/>
                </entity-find-one>
                <if condition="psShipGateway?.shippingGatewayConfigId">
                    <set field="shippingGatewayConfigId" from="psShipGateway?.shippingGatewayConfigId"/>
                </if>
            </if>
            <if condition="!shippingGatewayConfigId &amp;&amp; orderPart.vendorPartyId">
                <!-- if shipment.fromPartyId lookup setting there -->
                <service-call name="mantle.party.PartyServices.get#PartySettingValue" out-map="ptySettingOut"
                              in-map="[partyId:orderPart.vendorPartyId, partySettingTypeId:'DefaultShipmentGatewayConfigId']"/>
                <set field="shippingGatewayConfigId" from="ptySettingOut?.settingValue"/>
            </if>
            <if condition="!shippingGatewayConfigId">
                <set field="shippingGatewayConfigId" from="ec.user.getPreference('DefaultShipmentGatewayConfigId')"/>
            </if>

            <!-- get signatureRequiredEnumId from OrderPart, if not set look at Product and ProductStoreProduct -->
            <set field="signatureRequiredEnumId" from="orderPart.signatureRequiredEnumId"/>
            <if condition="!signatureRequiredEnumId">
                <iterate list="orderItemList" entry="orderItem">
                    <entity-find-one entity-name="mantle.order.OrderItem" value-field="Item">
                        <field-map field-name="orderId" from="orderId"/>
                        <field-map field-name="orderItemSeqId" from="item.orderItemSeqId"/>
                    </entity-find-one>
                    <set field="oiProduct" from="orderItem.product"/>
                    <if condition="oiProduct == null">
                        <continue/>
                    </if>
                    <if condition="oiProduct.signatureRequiredEnumId &amp;&amp; oiProduct.signatureRequiredEnumId != 'PsrNone'">
                        <set field="signatureRequiredEnumId" from="oiProduct.signatureRequiredEnumId"/>
                        <break/>
                    </if>
                </iterate>
            </if>
            <if condition="!signatureRequiredEnumId &amp;&amp; orderHeader.productStoreId">
                <iterate list="orderItemList" entry="orderItem">
                    <entity-find-one entity-name="mantle.order.OrderItem" value-field="Item">
                        <field-map field-name="orderId" from="orderId"/>
                        <field-map field-name="orderItemSeqId" from="item.orderItemSeqId"/>
                    </entity-find-one>
                    <entity-find-one entity-name="mantle.product.store.ProductStoreProduct"
                                     value-field="productStoreProduct">
                        <field-map field-name="productStoreId" from="orderHeader.productStoreId"/>
                        <field-map field-name="productId" from="orderItem.productId"/>
                    </entity-find-one>
                    <if condition="productStoreProduct == null">
                        <continue/>
                    </if>
                    <if condition="productStoreProduct.signatureRequiredEnumId &amp;&amp; productStoreProduct.signatureRequiredEnumId != 'PsrNone'">
                        <set field="signatureRequiredEnumId" from="productStoreProduct.signatureRequiredEnumId"/>
                        <break/>
                    </if>
                </iterate>
            </if>


            <!-- create Shipment record, get shipmentId -->
            <service-call name="create#mantle.shipment.Shipment" out-map="context"
                          in-map="[shipmentTypeEnumId:shipmentTypeEnumId, statusId:'ShipInput', entryDate:entryDate, priority:orderPart.priority,
                        fromPartyId:orderPart.vendorPartyId, toPartyId:orderPart.customerPartyId,
                        productStoreId:orderHeader.productStoreId, costUomId:orderHeader.currencyUomId,
                        systemMessageRemoteId:orderHeader.systemMessageRemoteId, handlingInstructions:orderPart.shippingInstructions,
                        signatureRequiredEnumId:signatureRequiredEnumId, otherPartyOrderId:orderPart.otherPartyOrderId,
                        shipAfterDate:orderPart.shipAfterDate, shipBeforeDate:orderPart.shipBeforeDate,
                        estimatedShipDate:orderPart.estimatedShipDate, estimatedArrivalDate:orderPart.estimatedDeliveryDate]"/>

            <if condition="createRouteSegment">
                <service-call name="create#mantle.shipment.ShipmentRouteSegment" out-map="context"
                              in-map="[shipmentId:shipmentId, carrierPartyId:carrier!=null? carrier:orderPart.carrierPartyId,
                            shipmentMethodEnumId:orderPart.shipmentMethodEnumId, shippingGatewayConfigId:shippingGatewayConfigId,
                            destPostalContactMechId:orderPart.postalContactMechId, destTelecomContactMechId:orderPart.telecomContactMechId,
                            originFacilityId:originFacilityId, destinationFacilityId:destinationFacilityId]"/>
            </if>
            <if condition="createPackage">
                <service-call name="create#mantle.shipment.ShipmentPackage" in-map="context" out-map="context"/>
            </if>

            <if condition="shipmentPackageSeqId &amp;&amp; shipmentRouteSegmentSeqId">
                <service-call name="create#mantle.shipment.ShipmentPackageRouteSeg"
                              in-map="[shipmentId:shipmentId, shipmentPackageSeqId:shipmentPackageSeqId,
                                shipmentRouteSegmentSeqId:shipmentRouteSegmentSeqId, trackingCode:trackingNumber,labelDate:labelDate]"/>
            </if>
            <service-call name="mantle.ShipStation.OmsShipmentServices.add#OrderItemsToShipment"
                          in-map="[shipmentId:shipmentId, orderId:orderId, orderPartSeqId:orderPartSeqId, itemsList:itemsList]"/>

            <if condition="shippingGatewayConfigId &amp;&amp; tryAutoPackage &amp;&amp; !customerOrgInternal">
                <service-call name="mantle.shipment.ShipmentServices.create#ShipmentAutoPackages"
                              in-map="[shipmentId:shipmentId, shipmentRouteSegmentSeqId:shipmentRouteSegmentSeqId]"/>
            </if>
        </actions>
    </service>

    <service verb="add" noun="OrderItemsToShipment" transaction="cache">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
            <parameter name="shipmentId" required="true"/>
            <parameter name="itemsList" required="true" type="List">
                <parameter name="itemMap" type="Map">
                    <parameter name="sku"/>
                    <parameter name="quantity"/>
                    <parameter name="lineItemId"/>
                    <parameter name="orderItemSeqId"/>
                </parameter>
            </parameter>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.shipment.Shipment" value-field="shipment"/>
            <if condition="!(shipment.statusId in ['ShipInput', 'ShipScheduled', 'ShipPicked'])">
                <return error="true" message="Cannot add Order item to Shipment in status ${shipment.statusId}"/>
            </if>


            <entity-find-one entity-name="mantle.order.OrderPart" value-field="orderPart"/>
            <if condition="!(orderPart.statusId in ['OrderApproved','OrderSent'])">
                <return error="true" message="Cannot add Order Part in status ${orderPart.statusId} to Shipment"/>
            </if>

            <entity-find entity-name="moqui.basic.EnumGroupMember" list="productItemTypeEgms" cache="true">
                <econdition field-name="enumGroupEnumId" value="EngItemsProduct"/>
            </entity-find>
            <set field="productItemTypes" from="productItemTypeEgms*.enumId"/>

            <!-- for each OrderItem, create ShipmentItem and ShipmentItemSource records -->
            <iterate list="itemsList" entry="item">
                <entity-find-one entity-name="mantle.order.OrderItem" value-field="orderItem">
                    <field-map field-name="orderId" from="orderId"/>
                    <field-map field-name="orderItemSeqId" from="item.orderItemSeqId"/>
                </entity-find-one>

                <!-- if no productId or not a product item type skip it-->
                <if condition="!orderItem.productId || !productItemTypes.contains(orderItem.itemTypeEnumId)">
                    <continue/>
                </if>

                <!-- see if Product is a physical item -->
                <entity-find-one entity-name="mantle.product.Product" value-field="product" cache="true">
                    <field-map field-name="productId" from="orderItem.productId"/>
                </entity-find-one>
                <if condition="!(product.productTypeEnumId in ['PtAsset', 'PtDigitalAsset', 'PtAssetUse', 'PtPickAssembly'])">
                    <continue/>
                </if>

                <!-- determine quantityNotShipped -->
                <set field="quantityNotShipped"
                     from="(orderItem.quantity != null ? orderItem.quantity : 1.0) * (orderItem.selectedAmount ?: 1.0)"/>
                <entity-find entity-name="mantle.shipment.ShipmentAndItemSource" list="existingSisList">
                    <econdition field-name="orderId"/>
                    <econdition field-name="orderItemSeqId" from="item.orderItemSeqId"/>
                    <econdition field-name="shipmentStatusId" operator="not-in" value="ShipRejected,ShipCancelled"/>
                    <econdition field-name="statusId" operator="not-equals" value="SisCancelled"/>
                </entity-find>
                <iterate list="existingSisList" entry="existingSis">
                    <set field="quantityNotShipped" from="quantityNotShipped - existingSis.quantity"/>
                </iterate>


                <set field="shipQuantity" from="item.quantity"/>
                <!-- Right now only shipping item when shipQuantity is greater than quantityNotShipped, else return warning-->
                <if condition="quantityNotShipped &lt;= 0">
                    <return type="warning"
                            message="Cannot ship ${orderItem.orderItemSeqId}"/>
                </if>
                <if condition="quantityNotShipped &lt; shipQuantity">
                    <return type="warning"
                            message="Cannot ship ${orderItem.orderItemSeqId}"/>
                </if>

                <!-- add or update the ShipmentItem record for the productId -->
                <entity-find-one entity-name="mantle.shipment.ShipmentItem" value-field="shipmentItem">
                    <field-map field-name="shipmentId"/>
                    <field-map field-name="productId" from="orderItem.productId"/>
                </entity-find-one>
                <if condition="shipmentItem">
                    <then>
                        <set field="shipmentItem.quantity" from="shipmentItem.quantity + item.quantity"/>
                        <entity-update value-field="shipmentItem"/>
                    </then>
                    <else>
                        <service-call name="create#mantle.shipment.ShipmentItem"
                                      in-map="[shipmentId:shipmentId, productId:orderItem.productId, quantity:quantityNotShipped]"/>
                    </else>
                </if>
                <entity-find entity-name="mantle.order.OrderItemBilling" list="orderItemBillingList">
                    <econdition field-name="orderId"/>
                    <econdition field-name="orderItemSeqId" from="item.orderItemSeqId"/>
                </entity-find>

                <!-- set shipmentId on existing OrderItemBilling records with no shipmentId (for billed before shipped, ie Invoice before Shipment) -->
                <set field="quantityNotBilled"
                     from="(item.quantity != null ? item.quantity : 1.0) * (orderItem.selectedAmount ?: 1.0)"/>
                <iterate list="orderItemBillingList" entry="orderItemBilling">
                    <if condition="!orderItemBilling.shipmentId &amp;&amp; quantityNotBilled >= orderItemBilling.quantity">
                        <set field="orderItemBilling.shipmentId" from="shipmentId"/>
                        <entity-update value-field="orderItemBilling"/>
                    </if>
                    <set field="quantityNotBilled" from="quantityNotBilled - orderItemBilling.quantity"/>
                    <!-- NOTE if orderItemBilling.shipmentId set split OrderItemBilling by Shipment quantities? -->
                </iterate>
                <!-- if quantityNotBilled > 0 do anything here? it should be handled when shipped (see InvoiceServices.create#SalesShipmentInvoices -->
                <!-- set invoiceId, invoiceItemSeqId from existing OrderItemBilling records -->
                <!-- simple case: full item already billed, just set the invoiceId so it is skipped when Shipment is Packed -->
                <set field="singleFullOib" from="null"/>
                <if condition="orderItemBillingList.size() == 1 &amp;&amp; quantityNotBilled == 0.0">
                    <set field="singleFullOib" from="orderItemBillingList[0]"/>
                </if>
                <!-- NOTE: handle case where order item was invoiced, then quantity increased? just handle on Shipment Packed (in InvoiceServices.create#SalesShipmentInvoices) -->

                <!-- create the ShipmentItemSource to associate the OrderItem with the Shipment -->
                <service-call name="create#mantle.shipment.ShipmentItemSource"
                              in-map="[shipmentId:shipmentId, productId:orderItem.productId, statusId:'SisPending',
                            quantity:item.quantity, quantityNotHandled:item.quantity,
                            orderId:orderItem.orderId, orderItemSeqId:item.orderItemSeqId,
                            invoiceId:singleFullOib?.invoiceId, invoiceItemSeqId:singleFullOib?.invoiceItemSeqId]"/>
            </iterate>
        </actions>
    </service>
</services>